@page "/fetchdata"

@using MAUIBlazorRefreshView.Data
@using MAUIBlazorRefreshView.States;
@using System.ComponentModel;

@implements IDisposable

@inject WeatherForecastService ForecastService
@inject RefreshViewState RefreshViewState

<label class="w-100 text-center text-muted my-2">Pull to Refresh</label>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        RefreshViewState.SetIsEnabled(true);
        await LoadDataAsync(true);
        RefreshViewState.PropertyChanged += OnPropertyChanged;
    }

    private async void OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(RefreshViewState.IsRefreshing) && RefreshViewState.IsRefreshing)
        {
            // Refresh our data
            // refetch from the server
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync(bool isInitialLoad = false)
    {
        if (!isInitialLoad)
        {
            forecasts = null;
            StateHasChanged();
        }

        await Task.Delay(1000);
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        
        if (!isInitialLoad)
        {
            RefreshViewState.SetIsRefreshing(false);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        RefreshViewState.SetIsEnabled(false);
        RefreshViewState.PropertyChanged -= OnPropertyChanged;
    }
}
